V1 - Sorted Word Dictionary
**With print (1,000):**
11.675327009000284
11.296415551000337
11.303801694000413

**Without print (1,000):**
9.122691438999937
9.29408249900007
9.137007385999823

**With print (10,000):**
111.1710740339995

**Without print (10,000):**
95.93674115300018

V2 - removed dict load
**With print (1,000):**
0.5546017859996937
0.5734935639993637
0.5514507379994029

**Without print (1,000):**
0.2962503909984662
0.3058995000028517
0.30122587000005296

**With print (10,000):**
6.038021037998988
6.296833869000693
5.4718684629988275
6.244787717998406

**Without print (10,000):**
3.0099240979980095
2.9975806299989927
2.9792075869991095
2.9062734180006373
2.9962728889986465

V2 - without ifs
**With print (1,000):**
N/A

**Without print (1,000):**
0.30075044499972137
0.28801490999831003
0.32457313800114207

**With print (10,000):**
N/A

**Without print (10,000):**
3.030269856000814
2.984034207998775
2.959833992001222
3.0004114049988857


## Unix Dictionary Addition
## Finding anagrams
The unix dictionary has faster lookup times because we find the anagram earlier as there are more keys.
**Ox (Without print) (10,000):**
2.5338323429969023
2.5413470110070193
2.5544159050041344

**Un (Without print) (10,000):**
2.5180373690018314
2.525958079000702
2.531505778002611

## Preprocessing
As expected the much larger dictionary is `2.78` times slower.
We shouldn't really ever need to be using a dictionary larger then this.
**Ox Prep:**
0.02311180099786725
0.02326396799617214
0.022261250000155997

**Un Prep:**
0.6351434009993682
0.6389991700052633
0.647304867998173
